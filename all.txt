1.tokenizer.c

    #include<stdio.h>
    #include <regex.h> 

    int main() {
    regex_t regex;
    int return_value;
    int return_value1;
    int return_value2;
    int return_value3;
    int return_value4;
    char x[20];
    printf("enter an expression : ");
    gets(x);


    return_value = regcomp(&regex, "=", 0);
    return_value = regexec(&regex, x, 0, NULL, 0);
    if (return_value == 0){
        printf("assignment operator");
    }
    

    
    return_value1 = regcomp(&regex,"[a-zA-z]",0);
    return_value1 = regexec(&regex, x, 0, NULL, 0);
    if (return_value1 == 0){
        printf("\nvariables");
    }
    
    return_value2 = regcomp(&regex,"[+-/%]",0);
    return_value2 = regexec(&regex, x, 0, NULL, 0);
    if (return_value2 == 0){
    printf("\narthmetic operator");
    }
    
    return_value3 = regcomp(&regex,";",0);
    return_value3 = regexec(&regex, x, 0, NULL, 0);
    if (return_value3 == 0){
        printf("\ntermination\n");
    }
    

    return 0;
    }

2. symboltable.lex

    %{
        char* scope();
        int flag=0;
        int gflag=0;
    %}
    %%
    (main)|(return) {

    }
    ['][a-z][']|[=][a-z] {

    }
    [;,#<>.() \n] {

    }
    [{] {
        gflag=1;
    }
    [}] {
        gflag=0;
    }
    [0-9=]  {

    }
    (int) {
        flag=1;
    }
    (float) {
        flag=2;
    }
    (char) {
        flag=3;
    }
    (double) {
        flag=4;
    }
    [a-z]+ {
        switch(flag)
        {
            case 1:printf("%s\t\t%s\t%ld\t%s\n",yytext,"int",sizeof(int),scope());break;
            case 2:printf("%s\t\t%s\t%ld\t%s\n",yytext,"float",sizeof(float),scope());break;
            case 3:printf("%s\t\t%s\t%ld\t%s\n",yytext,"char",sizeof(char),scope());break;
            case 4:printf("%s\t\t%s\t%ld\t%s\n",yytext,"double",sizeof(double),scope());break;
        }
    }
    %%
    int yywrap()
    {
        return 1;
    }
    char* scope()
    {
        if(gflag==1)
            return "local";
        else return "global";
    }
    int main()
    {
        FILE* fptr;
        fptr = fopen("tempfile.c","r");
        yyin = fptr;
        printf("identifier\ttype\tsize\tscope\n");
        printf("-------------------------------------\n");
        yylex();
        return 0;
    }

3.identifier 

    %{
    #include<stdio.h>

    %}
    %%
    "while"|"if"|"for"|"do"|"else"|"int"|"char"|"double"|"float"|"ll"|"string" {
        printf("%s is a keyword", yytext);

    }

    [a-zA-Z0-9_]* {
        printf("%s is anidentifiers",yytext);
    }
    %%
    int yywrap(){return 1;}
    int main(){
        printf("enter an identifier : ");
        yylex();
        return 0 ;
    }

4.tokenizer.l 

    %{
    #include<stdio.h>
    %}

    %%

    "while"|"if"|"for"|"else"|"int"|"float"|"double"|"char" {printf("%s is  Keyword \n",yytext);}

    [a-zA-Z_][a-zA-Z0-9_]* {printf("%s is an Identifier \n",yytext);}

    "+"|"-"|"*"|"/"|"^" {printf("%s is a Binary Operator \n",yytext);}

    "++" {printf("%s is an Incremental Operator \n",yytext);}

    "--" {printf("%s is a Decremental Operator \n",yytext);}

    "=="|"<="|">="|"<"|">"|"!=" {printf("%s is a Relational Operator \n",yytext);}

    "="|"=+"|"=-"|"=*"|"=/"  {printf("%s is an Assignment Operator\n",yytext);}

    [0-9]+ {printf("%s is an Integer \n",yytext);}

    [0-9]*"."[0-9]+ {printf("%s is a Float \n",yytext);}

    ";" {printf("%s is a Semicolon\n",yytext);}

    [,] {printf("%s is a Seperator \n",yytext);}

    " " {printf("(space)\n",yytext);}

    "("|")" {printf("%s is a Curved Bracket \n",yytext);}

    "{"|"}" {printf("%s is a Curly Brace \n",yytext);}

    "["|"]" {printf("%s is a Box Bracket \n",yytext);}

    %%

    int yywrap()								
    {
        return 1;
    }

    int main()
    {
        printf("Enter a String -");
        yylex();
        return 0;
        exit(0);
    }

5.assignment 

    a.l 
        %{
        #include"y.tab.h"
        extern char yyval;
        %}

        %%

        [0-9]+ {yylval.symbol=(char)(yytext[0]);return NUMBER;}
        [a-z] {yylval.symbol= (char)(yytext[0]);return LETTER;}
        . {return yytext[0];}
        \n {return 0;}

        %%
    a.y 

        %{
        #include"y.tab.h"
        #include<stdio.h>
        char addtotable(char,char,char);
        int index1=0;
        char temp = 'A'-1;
        struct expr{
        char operand1;
        char operand2;
        char operator;
        char result;
        };

        %}

        %union{
        char symbol;
        }

        %left '+' '-'
        %left '/' '*'
        %token <symbol> LETTER NUMBER
        %type <symbol> exp
        %%

        statement: LETTER '=' exp ';' {addtotable((char)$1,(char)$3,'=');};
        exp: exp '+' exp {$$ = addtotable((char)$1,(char)$3,'+');}
            |exp '-' exp {$$ = addtotable((char)$1,(char)$3,'-');}
            |exp '/' exp {$$ = addtotable((char)$1,(char)$3,'/');}
            |exp '*' exp {$$ = addtotable((char)$1,(char)$3,'*');}
            |'(' exp ')' {$$= (char)$2;}
            |NUMBER {$$ = (char)$1;}
            |LETTER {(char)$1;};

        %%

        struct expr arr[20]; 
        void yyerror(char *s){
            printf("Errror %s",s);
        }

        char addtotable(char a, char b, char o){
            temp++;
            arr[index1].operand1 =a;
            arr[index1].operand2 = b;
            arr[index1].operator = o;
            arr[index1].result=temp;
            index1++;
            return temp;
        }

        void threeAdd(){

            int i=0;
            char temp='A';
            while(i<index1){
                printf("%c:=\t",arr[i].result);
                printf("%c\t",arr[i].operand1);
                printf("%c\t",arr[i].operator);
                printf("%c\t",arr[i].operand2);
                i++;
                temp++;
                printf("\n");
            }
        }

        int yywrap()
        { return 1; }

        int main(){
            printf("Enter the expression: ");
            yyparse();
            threeAdd();
            return 0;
        }

6. arthmetic 
    a.l 
        %{
        #include<stdio.h>
        #include "y.tab.h"
        extern int yylval;
        %}

        %%
        [0-9]+ {
                yylval=atoi(yytext);
                return NUMBER;
            }
        [\t] ;
        [\n] return 0;
        . return yytext[0];
        %%
        int yywrap()
        {
        return 1;
        }

    a.y 

        %{
        #include<stdio.h>
        int flag=0;
        
        %}
        %token NUMBER

        %left '+' '-'
        %left '*' '/' '%'
        %left '(' ')'
        %%
        ArithmeticExpression: E{
                printf("\nResult=%d\n",$$);
                return 0;
                }
        E:E'+'E {$$=$1+$3;}
        |E'-'E {$$=$1-$3;}
        |E'*'E {$$=$1*$3;}
        |E'/'E {$$=$1/$3;}
        |E'%'E {$$=$1%$3;}
        |'('E')' {$$=$2;}
        | NUMBER {$$=$1;}
        ;
        %%

        void main()
        {
        printf("\nEnter an Arithmetic Expression - \n");
        yyparse();
        if(flag==0)
        printf("\nEntered arithmetic expression is Valid\n\n");
        
        }
        void yyerror()
        {
        printf("\nEntered arithmetic expression is Invalid\n\n");
        flag=1;
        }


7. for 

    lex :
        %{
        #include<stdio.h>
        #include<ctype.h>
        int c;
        %}
        op "++"|"--"
        rop "<"|">"|"<="|">="|"=="|"!="
        id [a-zA-Z][a-zA-Z0-9]*
        no [0-9]*
        pp [\n\t" "]

        %%

        for\({id}=({no}|{id})\)?(=,{id}=({no}|{id}))*\;({id}{rop}({id}|{no}))?\;({id}{op})?((,{id}{op})*\)\;?{pp}*\("{"(.*\n)*.*"}") 

            { 
                printf("correct");
                c=0;
        }
        .* {
            printf("\nwrong");
        }
        %%
        int main()
        { 
            printf("enter for - ");
            yylex();
        }
        int yywrap()
        {
            return 1;
        }
    
    (or)

    f.l 

        alpha [A-Za-z]
        digit [0-9]

        %%

        [\t \n]
        for             return FOR;
        {digit}+    return NUM;
        {alpha}({alpha}|{digit})* return ID;
        "<="         return LE;
        ">="         return GE;
        "=="         return EQ;
        "!="          return NE;
        "||"            return OR;
        "&&"         return AND;
        .                return yytext[0];

        %%
    f.y

        %{
        #include <stdio.h>
        #include <stdlib.h>

        %}
        %token ID NUM FOR LE GE EQ NE OR AND
        %right "="
        %left OR AND
        %left '>' '<' LE GE EQ NE
        %left '+' '-'
        %left '*' '/'
        %right UMINUS
        %left '!'

        %%
        
        S         : ST {printf("Input accepted\n"); exit(0);}
        ST       : FOR '(' E ';' E2 ';' E ')' DEF
                ;
        DEF    : '{' BODY '}' | E';'| ST | ;

        BODY  : BODY BODY
                | E ';'| ST|;
            
        E        : ID '=' E
                | E '+' E
                | E '-' E
                | E '*' E
                | E '/' E
                | E '<' E
                | E '>' E
                | E LE E
                | E GE E
                | E EQ E
                | E NE E
                | E OR E
                | E AND E
                | E '+' '+'
                | E '-' '-'
                | ID 
                | NUM
                ;

        
        E2     : E'<'E
                | E'>'E
                | E LE E
                | E GE E
                | E EQ E
                | E NE E
                | E OR E
                | E AND E
                ;   
        %%

        #include "lex.yy.c"
        main() {
            printf("Enter the expression:\n");
            yyparse();
        }   


8. ppparser

    #include<stdio.h>
    #include<string.h>
    void main()
    {
        char fin[10][20],st[10][20],ft[20][20],fol[20][20];
        int a=0,e,i,t,b,c,n,k,l=0,j,s,m,p;
        
        printf("\nEnter the no. of coordinates - ");
        scanf("%d",&n);

        printf("\nEnter the productions in the grammar - ");
        for(i=0;i<n;i++)
            scanf("%s",st[i]);

        for(i=0;i<n;i++)
            fol[i][0]='\0';
        for(s=0;s<n;s++)
        {
            for(i=0;i<n;i++)
            {
                j=3;
                l=0;
                a=0;
                l1:if(!((st[i][j]>64)&&(st[i][j]<91)))
                {
                    for(m=0;m<l;m++)
                    {
                        if(ft[i][m]==st[i][j])
                        goto s1;
                    }
                    ft[i][l]=st[i][j];
                    l=l+1;
                    s1:j=j+1;
                }
                else
                {
                    if(s>0)
                    {
                        while(st[i][j]!=st[a][0])
                        {
                            a++;
                        }
                        b=0;
                        while(ft[a][b]!='\0')
                        {
                            for(m=0;m<l;m++)
                            {
                                if(ft[i][m]==ft[a][b])
                                    goto s2;
                            }
                            ft[i][l]=ft[a][b];
                            l=l+1;
                            s2:b=b+1;
                        }
                    }
                }
                while(st[i][j]!='\0')
                {
                    if(st[i][j]=='|')
                    {
                        j=j+1;
                        goto l1;
                    }
                    j=j+1;
                }
                ft[i][l]='\0';
            }
        }
        printf("\nFirst:\n");
        for(i=0;i<n;i++)
            printf("FIRST[%c]=%s\n",st[i][0],ft[i]);
        fol[0][0]='$';
        for(i=0;i<n;i++)
        {
            k=0;
            j=3;
            if(i==0)
                l=1;
            else
                l=0;
            k1:while((st[i][0]!=st[k][j])&&(k<n))
            {
                if(st[k][j]=='\0')
                {
                    k++;
                    j=2;
                }
                j++;
            }
            j=j+1;
            if(st[i][0]==st[k][j-1])
            {
                if((st[k][j]!='|')&&(st[k][j]!='\0'))
                {
                    a=0;
                    if(!((st[k][j]>64)&&(st[k][j]<91)))
                    {
                        for(m=0;m<l;m++)
                        {
                            if(fol[i][m]==st[k][j])
                            goto q3;
                        }
                        fol[i][l]=st[k][j];
                        l++;
                        q3: j++;
                    }
                    else
                    {
                        while(st[k][j]!=st[a][0])
                        {
                            a++;
                        }
                        p=0;
                        while(ft[a][p]!='\0')
                        {
                            if(ft[a][p]!='@')
                            {
                                for(m=0;m<l;m++)
                                {
                                    if(fol[i][m]==ft[a][p])
                                        goto q2;
                                }
                                fol[i][l]=ft[a][p];
                                l=l+1;
                            }
                            else
                                e=1;
                            q2:p++;
                        }
                        if(e==1)
                        {
                            e=0;
                            goto a1;
                        }
                    }
                }
                else
                {
                    a1:c=0;
                    a=0;
                    while(st[k][0]!=st[a][0])
                    {
                        a++;
                    }
                    while((fol[a][c]!='\0')&&(st[a][0]!=st[i][0]))
                    {
                        for(m=0;m<l;m++)
                        {
                            if(fol[i][m]==fol[a][c])
                                goto q1;
                        }
                        fol[i][l]=fol[a][c];
                        l++;
                        q1:c++;
                    }
                }	
                goto k1;
            }
            fol[i][l]='\0';
        }
        printf("\nFollow:\n");
        for(i=0;i<n;i++)
            printf("FOLLOW[%c]=%s\n",st[i][0],fol[i]);
        printf("\n");
        s=0;
        for(i=0;i<n;i++)
        {
            j=3;
            while(st[i][j]!='\0')
            {
                if((st[i][j-1]=='|')||(j==3))
                {
                    for(p=0;p<=2;p++)
                    {
                        fin[s][p]=st[i][p];
                    }
                    t=j;		
                    for(p=3;((st[i][j]!='|')&&(st[i][j]!='\0'));p++)
                    {
                        fin[s][p]=st[i][j];
                        j++;
                    }
                    fin[s][p]='\0';			
                    if(st[i][k]=='@')
                    {
                        b=0;
                        a=0;
                        while(st[a][0]!=st[i][0])
                        {
                            a++;
                        }
                        while(fol[a][b]!='\0')
                        {
                            printf("M[%c,%c]=%s\n",st[i][0],fol[a][b],fin[s]);
                            b++;
                        }
                    }
                    else if(!((st[i][t]>64)&&(st[i][t]<91)))
                        printf("M[%c,%c]=%s\n",st[i][0],st[i][t],fin[s]);
                    else
                    {
                        b=0;
                        a=0;
                        while(st[a][0]!=st[i][3])
                        {			
                            a++;
                        }
                        while(ft[a][b]!='\0')
                        {
                            printf("M[%c,%c]=%s\n",st[i][0],ft[a][b],fin[s]);
                            b++;
                        }	
                    }		
                    s++;
                }
                if(st[i][j]=='|')
                    j++;
            }
        }
    }

